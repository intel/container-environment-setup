---
- name: install Python3 from epel-release
  yum:
    name:
      - python36
      - python36-devel
    enablerepo: "epel"
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'
    - ansible_distribution_version < '8'

- name: assert that hugepages are enabled
  assert:
    that: hugepages_enabled | default(false)
    fail_msg: "Hugepages are disabled. Please configure hugepages in the host vars or disable OVS-DPDK installation."

- name: clone OVS git repository
  git:
    repo: '{{ ovs_repo }}'
    dest: '{{ ovs_dir }}'
    version: '{{ ovs_version | default("master") }}'
    force: yes
  register: ovs_changed

- name: check whether bootstrap is required
  stat: path={{ ovs_dir }}/configure
  register: ovs_config_status

- name: bootstrap OVS
  command: ./boot.sh
  args:
    chdir: "{{ ovs_dir }}"
  when: ovs_config_status.stat.exists == false or (ovs_rebuild is defined) or ovs_changed.changed

- name: Check if OVS Makefile exists
  stat: path={{ ovs_dir }}/Makefile
  register: ovs_makefile_status

- name: prepare OVS-DPDK build
  command: ./configure --with-dpdk={{ dpdk_build }} CFLAGS="-g -O2 -Wno-cast-align"
  args:
    chdir: "{{ ovs_dir }}"
  when: ovs_makefile_status.stat.exists == false or (ovs_rebuild is defined) or ovs_changed.changed

- name: check if OVS distribution files exists
  stat: path={{ ovs_dir }}/distfiles
  register: ovs_distfiles_status

- name: build OVS-DPDK
  command: make CFLAGS='-O3 -march=native'
  args:
    chdir: "{{ ovs_dir }}"
  when: ovs_distfiles_status.stat.exists == false or (ovs_rebuild is defined) or ovs_changed.changed

- name: Check if OVS tools are installed
  stat: path=/usr/local/bin/ovsdb-tool
  register: ovs_tools_status

- name: install OVS-DPDK
  command: make install
  args:
    chdir: "{{ ovs_dir }}"
  when: ovs_tools_status.stat.exists == false or (ovs_rebuild is defined) or ovs_changed.changed

- name: create OVS folders
  file: path={{ item }} state=directory
  with_items:
    - /usr/local/etc/openvswitch
    - /usr/local/var/run/openvswitch

- name: clear database configuration if required
  file:
    path: /usr/local/etc/openvswitch/conf.db
    state: absent
  when: ovs_rebuild is defined or ovs_changed.changed

- name: check if database configuration exists
  stat: path=/usr/local/etc/openvswitch/conf.db
  register: ovs_dbconfig_status

- name: create database configuration
  command: '/usr/local/bin/ovsdb-tool create /usr/local/etc/openvswitch/conf.db /usr/local/share/openvswitch/vswitch.ovsschema'
  when: ovs_dbconfig_status.stat.exists == false

- name: start OVS database server
  command: '/usr/local/share/openvswitch/scripts/ovs-ctl --no-ovs-vswitchd start'

- name: set OVS dpdk-socket-mem
  command: '/usr/local/bin/ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem="{{ ovs_dpdk_socket_mem  }}"'

- name: set OVS dpdk-init
  command: '/usr/local/bin/ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true'

- name: set OVS pmd-cpu-mask
  command: '/usr/local/bin/ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask={{ ovs_dpdk_pmd_mask }}'

- name: set OVS dpdk-lcore-mask
  command: '/usr/local/bin/ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask={{ ovs_dpdk_lcore_mask }}'

- name: start OVS vswitchd
  command: /usr/local/share/openvswitch/scripts/ovs-ctl --no-ovsdb-server --db-sock="/usr/local/var/run/openvswitch/db.sock" restart

- name: create OVS bridge
  command: /usr/local/bin/ovs-vsctl --may-exist add-br br0 -- set bridge br0 datapath_type=netdev
