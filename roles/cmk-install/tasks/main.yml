---
- name: install epel-release on Red Hat based OS
  yum: name=epel-release
  when: ansible_os_family == 'RedHat'

- name: install dependencies
  include_role:
    name: install-dependencies

- name: install Python dependencies
  pip:
    name:
      - setuptools
      - docker

- name: clone CMK repository
  git:
    repo: "{{ cmk_git_url }}"
    dest: "{{ cmk_dir }}"
    version: "{{ cmk_version }}"
    force: yes

- name: read current CMK version
  command: git describe --abbrev=0 --tags
  args:
    chdir: "{{ cmk_dir }}"
  register: cmk_img_version

- name: build CMK image
  make:
    chdir: "{{ cmk_dir }}"

# NOTE(przemeklal): this fixes problem in CMK with ImagePullPolicy hardcoded to Never and the pod is scheduled on master node
- name: tag CMK image
  command: docker tag cmk:{{ cmk_img_version.stdout }} {{ registry_local_address }}/cmk:{{ cmk_img_version.stdout }}

- name: push CMK image to local registry
  command: docker push {{ registry_local_address }}/cmk:{{ cmk_img_version.stdout }}
  when:
    - inventory_hostname == groups['kube-node'][0]

- name: install cfssl
  command: go get -u github.com/cloudflare/cfssl/cmd/cfssl
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: install cfssljson
  command: go get -u github.com/cloudflare/cfssl/cmd/cfssljson
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: clean up any preexisting certs/key/CSRs
  shell: rm -rf cmk-webhook-* && kubectl delete csr cmk-webhook.{{ cmk_namespace }}
  args:
    chdir: "/usr/src/"
  when:
    - inventory_hostname == groups['kube-master'][0]
  failed_when: false

- name: populate CMK CSR template
  template:
    src: "webhook_csr.json.j2"
    dest: "/usr/src/cmk-webhook-csr.json"
    force: yes
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: generate key and CSR
  shell: cfssl genkey cmk-webhook-csr.json | cfssljson -bare cmk-webhook-server
  args:
    chdir: "/usr/src/"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: read generated key
  shell: cat cmk-webhook-server-key.pem
  args:
    chdir: "/usr/src/"
  register: key
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: load generated key
  set_fact:
    cmk_webhook_key: "{{ key.stdout | b64encode }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: read generated csr
  shell: cat cmk-webhook-server.csr
  args:
    chdir: "/usr/src/"
  register: csr
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: load generated csr
  set_fact:
    cmk_webhook_csr: "{{ csr.stdout | b64encode }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: populate CMK Kubernetes CA CSR template
  template:
    src: "kube_csr.yml.j2"
    dest: "/usr/src/cmk-webhook-kube-csr.yml"
    force: yes
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: send CSR to the Kubernetes API Server
  shell: kubectl apply -f /usr/src/cmk-webhook-kube-csr.yml
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: approve request
  shell: kubectl certificate approve cmk-webhook.{{ cmk_namespace }}
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: get approved certificate
  shell: kubectl get csr cmk-webhook.{{ cmk_namespace }} -o jsonpath='{.status.certificate}'
  args:
    chdir: "/usr/src/"
  register: cert
  when:
    - inventory_hostname == groups['kube-master'][0]
  retries: 30
  delay: 1
  until: cert.rc == 0

- name: load generated cert
  set_fact:
    cmk_webhook_cert: "{{ cert.stdout }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: create Helm charts directory if needed
  file:
    path: /usr/src/charts
    state: directory
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: copy CMK Helm chart to the master node
  copy:
    src: "{{ role_path }}/charts/cpu-manager-for-kubernetes"
    dest: "/usr/src/charts/"
  when:
    - inventory_hostname == groups['kube-master'][0]

# adds all kube-nodes to the list of CMK nodes
- name: build list of CMK hosts
  set_fact:
    cmk_hosts_list: "{{ groups['kube-node'] | join(',') }}"
  when:
    - cmk_use_all_hosts != true
    - (cmk_hosts_list is undefined) or (cmk_hosts_list | length == 0)

- name: set values for CMK Helm chart values
  set_fact:
    cmk_image: "{{ registry_local_address }}/cmk"
    cmk_tag: "{{ cmk_img_version.stdout }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: populate CMK Helm chart values template and push to master node
  template:
    src: "helm_values.yml.j2"
    dest: "/usr/src/charts/cmk-values.yml"
    force: yes
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: install CMK helm chart
  command: helm upgrade --install cmk --namespace {{ cmk_namespace }} -f /usr/src/charts/cmk-values.yml /usr/src/charts/cpu-manager-for-kubernetes
  when:
    - inventory_hostname == groups['kube-master'][0]

# this will mean that nodes are ready to be untainted
- name: wait for all cmk daemonset pods to be running
  shell: kubectl get pods -n {{ cmk_namespace }} -l name=cmk -o jsonpath={.items[*].status.phase}
  register: kubectl_cmk_running
  until: "['Running'] == kubectl_cmk_running.stdout.split() | unique"
  retries: 24
  delay: 5
  when:
    - inventory_hostname in cmk_hosts_list.split(',')
    - cmk_untaint_nodes
  delegate_to: "{{ groups['kube-master']|first }}"
  failed_when: false

- name: untaint nodes
  command: kubectl taint node "{{ inventory_hostname }}" cmk-
  failed_when: false
  register: untaint_result
  changed_when: "untaint_result.rc == 0"
  when:
    - inventory_hostname in cmk_hosts_list.split(',')
    - cmk_untaint_nodes
  delegate_to: "{{ groups['kube-master']|first }}"
