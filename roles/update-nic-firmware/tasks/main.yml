# Usage: include role and pass vars listed below
# Variables:
#   interface_name: interface name of the PF (mandatory, string)
#   nvmupdate_pkg_url: URL of the NVM update package for Linux (defaults to v7.20 for Intel 700 Series NIC)
#   nvmupdate_pkg_checksum: <algo:checksum> e.g. md5:2d429c8eda73378a86af6d6ec6247f0d (defaults to MD5 chksum of the above)
#   min_supported_fw_version: used for extra checks to ensure that FW upgrade is necessary and downloaded FW meets requirements (defaults to v7.20)
---
- name: install ethtool if missing
  include_role:
    name: install-dependencies

- name: get current FW version
  block:
    - shell: 
        cmd: ethtool -i {{ interface_name }}
      register: ethtool
    - set_fact:
        ethtool_drvinfo: "{{ ethtool.stdout | from_yaml }}"
    - set_fact:
        fw_version: "{{ ethtool_drvinfo['firmware-version'] }}"
    - set_fact:
        current_fw_version: "{{ 'v' + (fw_version.split(' ') | first) }}"
    - debug:
        msg: "Current firmware version is {{ current_fw_version }}"

- name: check if current firmware version meets minimal requirements
  set_fact:
    continue_nvmupdate: current_fw_version is version_compare(min_supported_fw_version, '>=')

- name: download nvmupdate package
  get_url:
    url: "{{ nvmupdate_pkg_url }}"
    checksum: "{{ nvmupdate_pkg_checksum }}"
    dest: /tmp/nvmupdate.tar.gz
  when: continue_nvmupdate

- name: unarchive nvmupdate package
  unarchive:
    src: /tmp/nvmupdate.tar.gz
    dest: /tmp
    extra_opts: [--strip-components=1] # to unpack Linux_x64 directly, skipping top-level model specific dir (e.g. 700Series)
  when: continue_nvmupdate

- name: get downloaded firmware version
  set_fact:
    downloaded_version: "{{ lookup('file', '/tmp/Linux_x64/version.txt') }}"
  when: continue_nvmupdate

- debug: var=downloaded_version
  when: continue_nvmupdate

# get device MAC address - this allows to run nvmupdate for the requested device only
- debug: var=ansible_facts[interface_name]['macaddress']

- name: assert that downloaded FW package isn't older than required
  assert:
    that: downloaded_version is version_compare(min_supported_fw_version, '>=')
    fail_msg: "Downloaded FW version is lower than required, please update 'nvmupdate_pkg_url' and 'nvmupdate_pkg_checksum' vars!"
  when: continue_nvmupdate

# stop if interface in use, note - we don't check for other PFs
- name: stop if network device is active in the routing table
  when: continue_nvmupdate
  block:
  - name: get routing table
    shell: ip -o route
    register: ip_route
  - name: filter link local routes
    set_fact:
      routes: "{{ ip_route.stdout_lines | reject('search', '169.254') | list }}"
  - assert:
      that: "routes | select('search', interface_name) | list | length == 0"
      fail_msg: "{{ interface_name }} is active in the routing table, refusing further actions"
      success_msg: "{{ interface_name }} isn't active in the routing table, it should be safe to continue unless other ports on that NIC are used for SSH"

- pause:
    prompt: "Are you sure you want to execute NVM update? (yes/no)"
  register: response
  when: continue_nvmupdate

- set_fact:
    continue_nvmupdate: response.user_input == "yes"
  when: continue_nvmupdate

- name: update FW - This operation may take several minutes. To avoid damage to your device, do not stop the update or reboot or power off the system during this update!
  shell:
    chdir: /tmp/Linux_x64
    cmd: ./nvmupdate64e -u -l -c nvmupdate.cfg -m '{{ ansible_facts[interface_name]['macaddress'] | replace(':','') }}'
  register: nvmupdate_result
  when: continue_nvmupdate
  changed_when: nvmupdate_result.stdout is search('Reboot is required to complete the update process.')

- name: output update log
  debug: var=nvmupdate_result.stdout
  when: continue_nvmupdate

- name: reboot after update
  reboot:
    reboot_timeout: 1200 # wait up to 20 minutes - if reboot takes longer after NVM update
  when:
    - nvmupdate_result.changed
    - continue_nvmupdate
