---
# "devbind" role binds network device to the requested kernel driver.
# Usage: set "pci_address" and "driver" variables
#  - name: use devbind
#    include_role:
#      name: devbind
#    vars:
#      driver: uio_pci_generic
#      pci_address: "{{ item }}"
#    with_items:
#      - "0000:02:0f.6"
#      - "0000:02:0f.7"

- name: get PCI device details
  block:
  - name: get PCI device details
    shell: lspci -vmmks {{ pci_address }}
    register: lspci

  - name: parse PCI device details
    set_fact:
      dev_info: "{{ lspci.stdout | replace('\t',' ') | from_yaml }}"
      interfaces: []

  - name: set current driver info
    set_fact:
      current_driver: "{{ dev_info.Driver | default('') }}"

- name: find network links of the device
  when: driver != current_driver
  block:
  - name: check that loadable kernel provided module exists
    shell: "modinfo {{ driver }}"
    register: module_exists
    failed_when: module_exists.rc not in [0, 1]
    changed_when: false

  - name: verify that modules-load.d exists
    file:
      path: /etc/modules-load.d
      state: directory
    when:
      - driver in modules_to_load

  - name: load module
    modprobe:
      name: "{{ driver }}"
      state: present
    when:
    - module_exists.rc == 0
    - driver in modules_to_load

  - name: load module on startup
    copy:
      dest: "/etc/modules-load.d/{{ driver }}.conf"
      content: "{{ driver }}"
    when:
      - module_exists.rc == 0
      - driver in modules_to_load

  - name: find network interfaces associated with the device
    find:
      paths: '{{ "/sys/bus/pci/devices/" + pci_address + "/net" }}'
      recurse: no
      file_type: any
    register: ls

  - name: create list of network interfaces names
    set_fact:
      interfaces: "{{ interfaces + [(link_path | basename)] }}"
    loop: "{{ ls.files | map(attribute='path') | list }}"
    loop_control:
      loop_var: link_path

  - name: add network interfaces names to device info
    set_fact:
      dev_info: "{{ dev_info | combine({ 'Interfaces': interfaces }) }}"

- name: display device information
  debug: var=dev_info

- name: fail if network device is active in the routing table
  when: driver != current_driver
  block:
  - name: get routing table
    shell: ip -o route
    register: ip_route

  - name: filter link local routes
    set_fact:
      routes: "{{ ip_route.stdout_lines | reject('search', '169.254') | list }}"

  - name: assert that none of the interfaces are active in the routing table
    assert:
      that: "routes | select('search', iface) | list | length == 0"
      fail_msg: "{{ iface }} is active in the routing table, refusing further actions"
      success_msg: "{{ iface }} isn't active in the routing table, continuing..."
    loop: "{{ dev_info.Interfaces }}"
    loop_control:
      loop_var: iface

- name: bind device to the driver
  when: driver != current_driver
  block:
  - name: unbind device from its current driver
    shell: echo -n {{ pci_address }} > /sys/bus/pci/drivers/{{ dev_info.Driver }}/unbind
    when: '"Driver" in dev_info'

  - name: override device driver
    shell: echo -n {{ driver }} > /sys/bus/pci/devices/{{ pci_address }}/driver_override
    when:
    - driver in dpdk_drivers
    - ansible_kernel is version_compare('3.15', '>=')

  - name: get device id
    shell: lspci -n -s {{ pci_address }}  | awk '{print $3}' | sed 's/:/ /g'
    when:
    - driver in dpdk_drivers
    - ansible_kernel is version_compare('3.15', '<')
    register: dev_id

  - name: add device id to the driver
    shell: echo -n {{ dev_id.stdout }} > /sys/bus/pci/drivers/{{ driver }}/new_id
    when:
    - driver in dpdk_drivers
    - ansible_kernel is version_compare('3.15', '<')

  - name: bind device to the driver
    shell: echo -n {{ pci_address }} > /sys/bus/pci/drivers/{{ driver }}/bind
    when:
    - (driver not in dpdk_drivers and ansible_kernel is version_compare('3.15', '<')) or ansible_kernel is version_compare('3.15', '>=')

  - name: check if driver_override exists
    stat: path=/sys/bus/pci/devices/{{ pci_address }}/driver_override
    register: driver_override
    when:
      - ansible_kernel is version_compare('3.15', '>=')

  - name: write empty string to driver_override to allow binding to another drivers in the future
    shell: echo -e '\00' > /sys/bus/pci/devices/{{ pci_address }}/driver_override
    when:
    - ansible_kernel is version_compare('3.15', '>=')
    - driver_override.stat.exists
