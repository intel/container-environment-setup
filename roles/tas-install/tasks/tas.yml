---
- name : install dependencies
  include_role:
    name: install-dependencies

- name: update to git2 on RHEL 7 based distros
  include_role:
    name: git2-install
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'
    - ansible_distribution_version < '8'

- name: clone TAS repository
  git:
    repo: "{{ tas_git_url }}"
    version: "{{ tas_git_version }}"
    dest: "{{ tas_dir }}"
    force: yes

- name: make build and make image - TAS 
  make:   
    target: "{{ item }}"
    chdir: "{{ tas_dir }}"
  loop:
    - build
    - image

- name: tag TAS-controller and TAS-extender
  command: docker tag {{ item }}:{{ tas_version }} {{ registry_local_address }}/{{ item }}:{{ tas_version }}
  loop:
    - tas-controller
    - tas-extender
    
- name: push TAS-controller and TAS-extender image to local registry
  command: docker push {{ registry_local_address }}/{{item}}:{{ tas_version }}
  when:
    - inventory_hostname == groups['kube-node'][0]
  loop:
    - tas-controller
    - tas-extender

- name: create descheduler directory if needed
  file:
    path: "{{ sigs_k8s_io_dir }}"
    state: directory
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: clone Descheduler for Kubernetes
  git:
    repo: "{{ descheduler_git_url }}"
    dest: "{{ descheduler_dir }}"
    force: yes
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: install descheduler
  make:
    chdir: "{{ descheduler_dir }}"
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: copy Helm chart and TASPolicy resource definition to master node
  copy:
    src: "{{ role_path }}/charts/{{ item }}"
    dest: "/usr/src/charts/"
  when:
    - inventory_hostname == groups['kube-master'][0]
  loop:
    - telemetry-aware-scheduling
    - tas-policy-crd.yml

- name: populate tas Helm chart values template and push to master node
  template:
    src: "tas-values.yml.j2"
    dest: "/usr/src/charts/tas-values.yml"
    force: yes
  when:
    - inventory_hostname == groups['kube-master'][0]

- name: create TASPolicy resource
  command: kubectl apply -f tas-policy-crd.yml
  args:
    chdir: "/usr/src/charts"
  when:
    - inventory_hostname == groups['kube-master'][0]
  
- name: install TAS helm chart
  command: helm upgrade --install --namespace {{ tas_namespace }} {{ tas_name }} -f tas-values.yml telemetry-aware-scheduling/
  args:
    chdir: "/usr/src/charts"
  when:
    - inventory_hostname == groups['kube-master'][0]
  retries: 5
  delay: 5
  register: result
  until: result.rc == 0

- name: Remove arguments from Kubernetes Scheduler file if they exist - policy-configmap
  command: "sed -i '/^    - --policy-configmap/d' /etc/kubernetes/manifests/kube-scheduler.yaml"
  when: inventory_hostname == groups['kube-master'][0]

- name: Remove arguments from Kubernetes Scheduler file if they exist - dnsPolicy
  command: "sed -i '/^  dnsPolicy: ClusterFirstWithHostNet/d' /etc/kubernetes/manifests/kube-scheduler.yaml"
  when: inventory_hostname == groups['kube-master'][0]

- name: Add arguments to our kube-scheduler manifest - configmap
  command: 'sed -e "/    - kube-scheduler/a\\    - --policy-configmap={{ tas_name }}-telemetry-aware-scheduling-scheduler-extender-policy\n    - --policy-configmap-namespace={{ tas_namespace }}" /etc/kubernetes/manifests/kube-scheduler.yaml -i'
  when: inventory_hostname == groups['kube-master'][0]

- name: Add arguments to our kube-scheduler manifest - dnsPolicy
  command: 'sed -e "/spec/a\\  dnsPolicy: ClusterFirstWithHostNet" /etc/kubernetes/manifests/kube-scheduler.yaml -i'
  when: inventory_hostname == groups['kube-master'][0]

# set demo health metric to 0 to allow scheduling by default
- name: ensure that node_metrics directory exists
  file:
    path: /var/lib/node-metrics
    state: directory

- name: set demo health metric for all nodes
  copy: 
    content: "node_health_metric 0\n"
    dest: /var/lib/node-metrics/text.prom
